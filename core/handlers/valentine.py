from aiogram import Bot
from aiogram.types import Message
from core.utils.dbconnect import Request
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiogram.enums.chat_member_status import ChatMemberStatus
from core.utils.callbackdata import CallbackAddAsAuthor
from core.keyboards.inline import get_yes_no_markup
from core.utils.statesform import Valentine
from core.settings import settings
from aiogram.types.link_preview_options import LinkPreviewOptions
import html

STICKER_1 = "CAACAgEAAxkBAAEpdfVly4OSYISFTCWfdsY13siwxFpnWAACgAEAAnY3dj-N4Xs2gVMb7DQE"
STICKER_2 = "CAACAgEAAxkBAAEpdfNly4MQpCyNTavaQcNaGsQ-KBDkEQACEQEAAnY3dj8PX08Hh0bD5jQE"
STICKER_3 = "CAACAgEAAxkBAAEpdfply4Sx36wJFeLzRwcN5_ZtrqmzDAAC2wEAAizw6Ebki74oV6hSZjQE"
STICKER_4 = "CAACAgEAAxkBAAEpdfxly4TklQ2kRMv3PhsGjKOk22VUngACsQEAAnY3dj-kdqoozr_pczQE"
STICKER_5 = "CAACAgEAAxkBAAEpdi5ly43xZE2Cm6XNKywdmMMWgigXIgACfgEAAnY3dj8UjQY54xnG7zQE"
disabled_links = LinkPreviewOptions(is_disabled=True)

async def valentine_start(message: Message, bot: Bot, request: Request, state: FSMContext):
    if message.chat.type != 'private':
        await message.reply('–ø—Ä–∏–π–º–∞—é –ª–∏—à–µ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö <3')
    else:
        await message.answer('–Ω—É –¥–∞–≤–∞–π, –∫–æ–≥–æ –ª—é–±–∏–º–æ –Ω–∞ —Ü–µ–π —Ä–∞–∑?\n\n–Ω–∞–ø–∏—à–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ <b>@username</b>\n\n—è–∫—â–æ —É –ª—é–¥–∏–Ω–∏'
                             ' –Ω–µ–º–∞ @username, –º–æ–∂–µ—à –Ω–∞–ø–∏—Å–∞—Ç–∏ —ó—ó —ñ–º\'—è —Ç–∞–∫, —â–æ–± –≤–æ–Ω–∞ –∑–º–æ–≥–ª–∞ –∑–Ω–∞–π—Ç–∏ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É '
                             '(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –î—ñ–º–∞ –û—Å—Ç–∞–ø–µ–Ω–∫–æ –ö-24)\n\n<i>—è–∫—â–æ –∑–∞—Ö–æ—á–µ—à –∑—É–ø–∏–Ω–∏—Ç–∏ –ø—Ä–æ—Ü–µ—Å, —Ç–∏–∫–∞–π <b>/lonely</b>'
                             ' (—Ç—é, –Ω–∞–≤—ñ—Ç—å –Ω–µ —Å–ø—Ä–æ–±—É—î—à?)</i>')
        await state.set_state(Valentine.GET_TO)


async def valentine_get_to(message: Message, bot: Bot, request: Request, state: FSMContext):
    if not message.text:
        await message.answer_sticker(sticker=STICKER_1)
        await message.answer('—á–µ–ª —Ç–∏... –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º –Ω—ñ–∫/—ñ–º\'—è')
    else:
        if len(message.text) > 30:
            await message.answer_sticker(sticker=STICKER_1)
            await message.answer('–ø–∏—à–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –º–∞–∫—Å–∏–º—É–º 30 –ª—ñ—Ç–µ—Ä')
        elif len(message.text) < 5:
            await message.answer_sticker(sticker=STICKER_1)
            await message.answer('–ø–∏—à–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –º—ñ–Ω—ñ–º—É–º 5 –ª—ñ—Ç–µ—Ä')
        else:
            to = message.text.replace("*", "\\*")\
                .replace("[", "\\[")\
                .replace("`", "\\`")
            to = html.escape(to, quote=True)

            if to.isascii() and ' ' not in to and '@' not in to:
                to = '@' + to

            await state.update_data(to=to)
            await state.set_state(Valentine.GET_MSG)
            await message.answer('–∞ —Ç–µ–ø–µ—Ä —à–æ —Ç–∏ —Ö–æ—á–µ—à –ª—é–¥–∏–Ω—ñ —Å–∫–∞–∑–∞—Ç–∏?\n\n–Ω–∞–¥—Å–∏–ª–∞–π –∞–±–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∞–±–æ –∫–∏–¥–∞–π '
                                 '—Ñ–æ—Ç–∫—É/–∫–∞—Ä—Ç–∏–Ω–∫—É\n\n–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∑–≤—ñ–¥—Å–∏: <a href="https://t.me/kft_cj/711">—à–ª—å–æ–ø</a>'
                                 '\n—Ä–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞ –∫–∞—Ä—Ç–∏–Ω—Ü—ñ –≤–∫–∞–∑–∞—Ç–∏ –∫–æ–º—É —Ç–∞ –≤—ñ–¥ '
                                 '–∫–æ–≥–æ —â–µ —Ä–∞–∑ :)\n\n<i>P.S: —è–∫—à–æ —Ö–æ—á–µ—à —à–æ—Å—å —ñ–Ω—à–µ –∑–∞ —Ç–µ–∫—Å—Ç –∞–±–æ —Ñ–æ—Ç–∫—É, —Ç–æ –Ω–∞–ø–∏—à–∏ '
                                 '–∞–¥–º—ñ–Ω–∞–º <b>@kft_cj_bot</b></i> ü§ë',
                                 disable_web_page_preview=True,
                                 link_preview_options=disabled_links)


async def valentine_get_message(message: Message, bot: Bot, request: Request, state: FSMContext):
    if (not message.text) and (not message.photo):
        await message.answer_sticker(STICKER_4)
        await message.answer('–¥–æ–∑–≤–æ–ª–µ–Ω—ñ –ª–∏—à–µ —Ñ–æ—Ç–∫–∏ —Ç–∞ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n\n–∞–ª–µ —è–∫—à–æ –¥—É–∂–µ —Ö–æ—á–µ—à —â–æ—Å—å —ñ–Ω—à–µ, –º–æ–∂–µ—à '
                             '–¥–æ–º–æ–≤–∏—Ç–∏—Å—å –∑ –∞–¥–º—ñ–Ω–∞–º–∏ <b>@kft_cj_bot</b> ü§ë')
    else:
        if message.text:
            if len(message.text) > 500:
                await message.answer_sticker(STICKER_5)
                await message.answer('–∫–Ω–∏–≥—É –ø–∏—à–µ—à? –Ω–µ –±—ñ–ª—å—à–µ 500 —Å–∏–º–≤–æ–ª—ñ–≤ —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ')
                return
            else:
                msg = message.text.replace("*", "\\*") \
                    .replace("[", "\\[") \
                    .replace("`", "\\`")
                msg = html.escape(msg, quote=True)
                await state.update_data(text=msg)
        else:
            if message.caption is not None:
                msg = message.caption.replace("*", "\\*") \
                    .replace("[", "\\[") \
                    .replace("`", "\\`")
                msg = html.escape(msg, quote=True)
                await state.update_data(text=msg)

            await state.update_data(photo=message.photo[-1].file_id)
        await message.answer('—Å—É–ø–µ—Ä!\n\n–¥–æ–¥–∞—Ç–∏ —Ç–µ–±–µ —è–∫ –∞–≤—Ç–æ—Ä–∞?', reply_markup=get_yes_no_markup())
        await state.set_state(Valentine.GET_FROM)


async def valentine_get_from(call: CallbackQuery, bot: Bot, request: Request, callback_data: CallbackAddAsAuthor,
                             state: FSMContext):
    data = await state.get_data()
    add_author = callback_data.todo
    to = data.get('to')
    text = data.get('text')
    photo = data.get('photo')
    user = call.from_user
    name_from = str(user.first_name or '') + '' + str(user.last_name or '')
    if name_from != '':
        name_from = html.escape(name_from)

    if user.username is not None:
        frm = f'@{user.username}'
        admin_frm = f'@{user.username}'
    else:
        frm = f'<a href="tg://user?id={user.id}">@{name_from}</a>'
        admin_frm = f'<a href="tg://user?id={user.id}">@{name_from}</a>'

    if callback_data.todo != 'add':
        frm = '@–∞–Ω–æ–Ω—ñ–º'


    if photo:
        txt = f"<b>–í–ê–õ–ï–ù–¢–ò–ù–ö–ê! </b>üíå\n\n<i>–¥–ª—è –∫–æ–≥–æ: </i>{to}\n<i>–≤—ñ–¥ –∫–æ–≥–æ: </i>{frm}"
        txt_admin = f"<b>–í–ê–õ–ï–ù–¢–ò–ù–ö–ê! </b>üíå\n\n<i>–¥–ª—è –∫–æ–≥–æ: </i>{to}\n<i>–≤—ñ–¥ –∫–æ–≥–æ: </i>{admin_frm}"
        if text:
            txt += f"\n\n<tg-spoiler>{text}</tg-spoiler>"
            txt_admin += f"\n\n{text}"

        await bot.send_photo(settings.bots.val_main_id, photo, caption=txt, has_spoiler=True)
        await bot.send_photo(settings.bots.val_logs_id, photo, caption=txt_admin)

    else:
        text_user = f"<b>–í–ê–õ–ï–ù–¢–ò–ù–ö–ê! </b>üíå\n\n<i>–¥–ª—è –∫–æ–≥–æ: </i>{to}\n<i>–≤—ñ–¥ –∫–æ–≥–æ: </i>{frm}\n\n<tg-spoiler>{text}</tg-spoiler>"
        text_admin = f"<b>–í–ê–õ–ï–ù–¢–ò–ù–ö–ê! </b>üíå\n\n<i>–¥–ª—è –∫–æ–≥–æ: </i>{to}\n<i>–≤—ñ–¥ –∫–æ–≥–æ: </i>{admin_frm}\n\n{text}"

        await bot.send_message(settings.bots.val_main_id, f'{text_user}', link_preview_options=disabled_links,
                               disable_web_page_preview=True)
        await bot.send_message(settings.bots.val_logs_id, f'{text_admin}', link_preview_options=disabled_links,
                               disable_web_page_preview=True)

    await request.add_valentine(user_id=user.id, username=user.username, name=name_from, to_user=to)
    await call.message.answer_sticker(STICKER_3)
    await call.message.edit_text('–∑—Ä–æ–±–ª–µ–Ω–æ! ‚ù§')
    await state.clear()
    await call.answer()


async def valentine_get_cancel(message: Message, bot: Bot, request: Request, state: FSMContext):
    await state.clear()
    await message.answer_sticker(STICKER_2)
    await message.answer('—É—Ö–æ–¥–∏—à –Ω—É —ñ —É—Ö–æ–¥—å')


async def valentine_call_cancel(call: CallbackQuery, bot: Bot, request: Request, callback_data: CallbackAddAsAuthor,
                             state: FSMContext):
    await call.answer()
    await call.message.edit_text('–≤—Å–µ —Ñ—ñ–≥–Ω—è, –¥–∞–≤–∞–π –ø–æ –Ω–æ–≤—ñ–π')



